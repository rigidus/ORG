:PROPERTIES:
:ID:       47ecbcbe-78b5-4cbf-8bd3-d900f9017e18
:END:
#+title: backup-deduplicator

В процессе работы накапливаются старые бэкапы, "на всякий случай" сохраненные файлы и прочий информационный мусор, который занимает место и может дублировать друг друга, поэтому чтобы дедуплицировать его, я решил написать небольшую программу, которая проходит по файловой системе и:
- вычисляет хэши для каждого файла
- сохраняет их в хэш-таблицу с путем к этому файлу
- находит дупликаты
- опционально - сжимает эти файлы и заворачивает мелкие файлы в тарболы

#+BEGIN_SRC lisp

  (defun process-files-in-directory (directory-path function)
    "Обрабатывает все файлы в директории и ее поддиректориях с помощью указанной функции."
    (labels ((traverse (directory)
               (dolist (entry (directory directory))
                 (let ((path (merge-pathnames entry directory)))
                   (cond
                     ((directoryp path) ; Если это поддиректория, продолжаем обход
                      (traverse path))
                     ((file-exists-p path) ; Если это файл, применяем функцию
                      (funcall function path)))))))
      (traverse (make-pathname :directory directory-path))))


  (ql:quickload "split-sequence")

  (defun get-hash-and-path-for-all-files-in-directory (dir)
    "returns list of list like '((hash path) (hash path) ..)"
    (let* ((fnd-cmd (list "find" dir "-type" "f" "-exec" "md5sum" "{}" "\;"))
           (fnd-res (uiop:run-program fnd-cmd :output :string))
           (pairs (loop for str in (split-sequence:split-sequence #\NewLine fnd-res)
                        collect (remove-if #'(lambda (elt) (equal elt ""))
                                           (split-sequence:split-sequence #\Space str)))))
      (loop for (hash path) :in (remove-if #'null pairs)
            collect (list (parse-integer hash :radix 16) path))))

  ;; (get-hash-and-path-for-all-files-in-directory ".")

  (defun get-subdirs (dir)
    (let* ((fnd-cmd (list "find" dir "-type" "d"))
           (fnd-res (uiop:run-program fnd-cmd :output :string)))
      (cdr (remove-if #'(lambda (elt) (equal elt ""))
                      (split-sequence:split-sequence #\NewLine fnd-res)))))

  ;; (get-subdirs ".")


#+END_SRC
