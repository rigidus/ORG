:PROPERTIES:
:ID:       47ecbcbe-78b5-4cbf-8bd3-d900f9017e18
:END:
#+title: backup-deduplicator

В процессе работы накапливаются старые бэкапы, "на всякий случай" сохраненные файлы и прочий информационный мусор, который занимает место и может дублировать друг друга, поэтому чтобы дедуплицировать его, я решил написать небольшую программу, которая проходит по файловой системе и:
- вычисляет хэши для каждого файла
- сохраняет их в хэш-таблицу с путем к этому файлу
- находит дупликаты
- опционально - сжимает эти файлы и заворачивает мелкие файлы в тарболы

#+BEGIN_SRC lisp
  (ql:quickload "split-sequence")

  (defparameter *que* nil)
  (defparameter *hft* (make-hash-table))

  (defun push-to-dir-que (list-of-dirs)
    (loop for dir in list-of-dirs do
      (push dir *dir-que*)))

  (defun get-subdirs (dir)
    (let* ((fnd-cmd (list "find" dir "-type" "d"))
           (fnd-res (uiop:run-program fnd-cmd :output :string)))
      (cdr (remove-if #'(lambda (elt) (equal elt ""))
                      (split-sequence:split-sequence #\NewLine fnd-res)))))

  ;; (get-subdirs ".")

  (defun traverse-dirs (dir)
    "side-effect: *que*"
    (loop for dir in (get-subdirs dir) do
      (push dir *que*)
      (traverse-dirs dir)))

  ;; (traverse-dirs "./")
  ;; *que*

  (defun get-hash-and-path-for-all-files-in-directory (dir)
    "returns list of list like '((hash path) (hash path) ..)"
    (let* ((fnd-cmd (list "find" dir "-type" "f" "-exec" "md5sum" "{}" "\;"))
           (fnd-res (uiop:run-program fnd-cmd :output :string))
           (pairs (loop for str in (split-sequence:split-sequence #\NewLine fnd-res)
                        collect (remove-if #'(lambda (elt) (equal elt ""))
                                           (split-sequence:split-sequence #\Space str)))))
      (loop for (hash path) :in (remove-if #'null pairs)
            collect (list (parse-integer hash :radix 16) path))))

  ;; (get-hash-and-path-for-all-files-in-directory ".")

  (defun process-que ()
    (tagbody repeat
       (let ((elt (pop *que*)))
         (if (not (null elt))
             (let ((hash-files (get-hash-and-path-for-all-files-in-directory (pop *que*))))
               (if (not (null hash-files))
                   (loop for (hash file) in hash-files do
                     (multiple-value-bind (value present-p)
                         (gethash hash *hft*)
                       (if (null present-p)
                           (setf (gethash hash *hft*) (list file))
                           (setf (gethash hash *hft*) (push file value))))))
               (go repeat))
             ;; else - empty que
             (print ":: -fin- ::")))))

  (defun main (dir)
    (setf *que* nil)
    (setf *hft* (make-hash-table))
    (traverse-dirs dir)
    (process-que)
    (maphash #'(lambda (k v)
                 (if (> 1 (length v))
                     (print (list k v))))
             ,*hft*))

  ;; (main "/home/rigidus/src/")
  ;; (print "a")
#+END_SRC
