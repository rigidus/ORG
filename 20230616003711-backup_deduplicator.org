:PROPERTIES:
:ID:       47ecbcbe-78b5-4cbf-8bd3-d900f9017e18
:END:
#+title: backup-deduplicator

В процессе работы накапливаются старые бэкапы, "на всякий случай" сохраненные файлы и прочий информационный мусор, который занимает место и может дублировать друг друга, поэтому чтобы дедуплицировать его, я решил написать небольшую программу, которая проходит по файловой системе и:
- вычисляет хэши для каждого файла
- сохраняет их в хэш-таблицу с путем к этому файлу
- находит дупликаты
- опционально - сжимает эти файлы и заворачивает мелкие файлы в тарболы

#+BEGIN_SRC lisp
  (ql:quickload "cl-fad")
  (ql:quickload "ironclad")

  (let ((ht (make-hash-table :test #'equal)))
    (labels ((dir-p (dir)
               (let ((last (- (length dir) 1)))
                 (if (< last 0)
                     (error 'empty-dir))
                 (char= #\/ (char dir last))))
             (walk (name)
               (handler-case
                   (let ((fnamestr (namestring name)))
                     (unless (dir-p fnamestr)
                       (let ((hash
                               (ironclad:byte-array-to-hex-string
                                (ironclad:digest-file 'ironclad:md5 fnamestr))))
                         (multiple-value-bind (value present-p)
                             (gethash hash ht)
                           (if (null present-p)
                               (setf (gethash hash ht) (list fnamestr))
                               (setf (gethash hash ht) (push fnamestr value)))))))
                 (FILE-DOES-NOT-EXIST nil))))
      (cl-fad:walk-directory "/home/rigidus/src/" #'walk :directories t)
      (maphash #'(lambda (k v)
                   (when (> (length v) 1)
                     (print (list k v))))
               ht)))
#+END_SRC
